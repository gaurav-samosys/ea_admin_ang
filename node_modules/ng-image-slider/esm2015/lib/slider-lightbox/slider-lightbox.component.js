/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Inject, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { NgImageSliderService } from './../ng-image-slider.service';
/** @type {?} */
const youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
/** @type {?} */
const validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];
/** @type {?} */
const validVideoExtensions = ['mp4'];
export class SliderLightboxComponent {
    /**
     * @param {?} cdRef
     * @param {?} sanitizer
     * @param {?} imageSliderService
     * @param {?} document
     */
    constructor(cdRef, sanitizer, imageSliderService, document) {
        this.cdRef = cdRef;
        this.sanitizer = sanitizer;
        this.imageSliderService = imageSliderService;
        this.document = document;
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.INVALID = 'invalid';
        this.totalImages = 0;
        this.nextImageIndex = -1;
        this.popupWidth = 1200;
        this.marginLeft = 0;
        this.lightboxPrevDisable = false;
        this.lightboxNextDisable = false;
        this.showLoading = true;
        this.effectStyle = 'none';
        this.speed = 1; // default speed in second
        // default speed in second
        this.title = '';
        // @Inputs
        this.videoAutoPlay = false;
        this.currentImageIndex = 0;
        this.direction = 'ltr';
        this.images = [];
        this.paginationShow = false;
        this.infinite = false;
        // @Output
        this.close = new EventEmitter();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set animationSpeed(data) {
        if (data
            && typeof (data) === 'number'
            && data >= 0.1
            && data <= 5) {
            this.speed = data;
        }
    }
    /* @Output() prevImage = new EventEmitter<any>(); */
    /* @Output() nextImage = new EventEmitter<any>(); */
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyboardEvent(event) {
        if (event && event.key) {
            if (event.key.toLowerCase() === 'arrowright') {
                this.nextImageLightbox();
            }
            if (event.key.toLowerCase() === 'arrowleft') {
                this.prevImageLightbox();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.getImageData();
        this.cdRef.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.resetState();
    }
    /**
     * @return {?}
     */
    closeLightbox() {
        this.close.emit();
    }
    /**
     * @return {?}
     */
    prevImageLightbox() {
        if (this.infinite && this.currentImageIndex == 0) {
            this.currentImageIndex = this.images.length;
        }
        if (this.currentImageIndex > 0 && !this.lightboxPrevDisable) {
            this.currentImageIndex--;
            //this.prevImage.emit();
            this.getImageData();
            this.nextPrevDisable();
        }
    }
    /**
     * @return {?}
     */
    nextImageLightbox() {
        if (this.infinite && this.currentImageIndex == this.images.length - 1) {
            this.currentImageIndex = -1;
        }
        if (this.currentImageIndex < this.images.length - 1 && !this.lightboxNextDisable) {
            this.currentImageIndex++;
            //this.nextImage.emit();
            this.getImageData();
            this.nextPrevDisable();
        }
    }
    /**
     * @return {?}
     */
    nextPrevDisable() {
        this.lightboxNextDisable = true;
        this.lightboxPrevDisable = true;
        //setTimeout(() => {
        this.applyButtonDisableCondition();
        //}, this.speed * 1000);
    }
    /**
     * @return {?}
     */
    applyButtonDisableCondition() {
        this.lightboxNextDisable = false;
        this.lightboxPrevDisable = false;
        if (!this.infinite && this.currentImageIndex >= this.images.length - 1) {
            this.lightboxNextDisable = true;
        }
        if (!this.infinite && this.currentImageIndex <= 0) {
            this.lightboxPrevDisable = true;
        }
    }
    /**
     * @return {?}
     */
    getImageData() {
        if (this.images
            && this.images.length
            && typeof (this.currentImageIndex) === 'number'
            && this.currentImageIndex !== undefined
            && this.images[this.currentImageIndex]
            && (this.images[this.currentImageIndex]['image'] || this.images[this.currentImageIndex]['video'])) {
            this.title = this.images[this.currentImageIndex]['title'] || '';
            this.totalImages = this.images.length;
            for (let iframeI in this.document.getElementsByTagName("iframe")) {
                if (this.document.getElementsByTagName("iframe")[iframeI] && this.document.getElementsByTagName("iframe")[iframeI].contentWindow) {
                    this.document.getElementsByTagName("iframe")[iframeI].contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
                }
            }
            for (let videoI in this.document.getElementsByTagName("video")) {
                if (this.document.getElementsByTagName("video")[videoI] && this.document.getElementsByTagName("video")[videoI].pause) {
                    this.document.getElementsByTagName("video")[videoI].pause();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    resetState() {
        this.images = [];
    }
}
SliderLightboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'slider-lightbox',
                template: "<div class=\"ng-image-slider-lightbox\">\n    <div class=\"lightbox-wrapper\">\n        <a class=\"close\" (click)=\"closeLightbox()\"></a>\n        <div class=\"lightbox-div\" #lightboxDiv>\n            <div class=\"pre-loader\">\n                <div class=\"mnml-spinner\"></div>\n            </div>\n\n            <!-- <img *ngIf=\"type === IMAGE && fileUrl\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" [src]=\"fileUrl\">\n            <iframe *ngIf=\"type === YOUTUBE && fileUrl\"\n                [ngClass]=\"{'show': showImage, 'hide': !showImage}\"\n                [src]=\"fileUrl\"\n                frameborder=\"0\" allowfullscreen></iframe>\n            <video [autoplay]=\"videoAutoPlay\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" *ngIf=\"type === VIDEO && fileUrl\" controls  controlsList=\"nodownload\">\n                <source [dir]=\"direction\" [src]=\"fileUrl\" type=\"video/mp4\"> Your browser does not support the video tag.\n            </video> -->\n\n            <div class=\"lightbox-image-main\">\n                <div class=\"lightbox-image\"\n                    *ngFor=\"let img of images; let i = index\"\n                    [ngClass]=\"{'ng-image-lightbox-show': i == currentImageIndex, 'ng-image-lightbox-hide': i != currentImageIndex}\">\n                    <custom-img\n                        *ngIf=\"i == currentImageIndex\"\n                        [imageUrl]=\"img.image || img.video\"\n                        [isVideo]=\"!!(img.posterImage || img.video)\"\n                        [videoAutoPlay]=\"videoAutoPlay\"\n                        [alt]=\"img.alt || img.title || ''\"\n                        [title]=\"img.title || img.alt || ''\"\n                        [showVideo]=\"true\"\n                        [direction]=\"direction\">\n                    </custom-img>\n                </div>\n            </div>\n            <div [dir]=\"direction\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" class=\"caption\">{{ title }}</div>\n            <a *ngIf=\"totalImages > 1\" [ngClass]=\"{'disable': lightboxPrevDisable}\" class=\"prev icons prev-icon\" (click)=\"prevImageLightbox()\">&lsaquo;</a>\n            <a *ngIf=\"totalImages > 1\" [ngClass]=\"{'disable': lightboxNextDisable}\" class=\"next icons next-icon\" (click)=\"nextImageLightbox()\">&rsaquo;</a>\n        </div>\n    </div>\n    <div *ngIf=\"paginationShow\" class=\"popup-pagination\">{{currentImageIndex}} of {{totalImages}}</div>\n</div>"
            }] }
];
/** @nocollapse */
SliderLightboxComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DomSanitizer },
    { type: NgImageSliderService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
SliderLightboxComponent.propDecorators = {
    videoAutoPlay: [{ type: Input }],
    currentImageIndex: [{ type: Input }],
    showImage: [{ type: Input }],
    direction: [{ type: Input }],
    images: [{ type: Input }],
    paginationShow: [{ type: Input }],
    animationSpeed: [{ type: Input }],
    infinite: [{ type: Input }],
    close: [{ type: Output }],
    handleKeyboardEvent: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SliderLightboxComponent.prototype.YOUTUBE;
    /** @type {?} */
    SliderLightboxComponent.prototype.IMAGE;
    /** @type {?} */
    SliderLightboxComponent.prototype.VIDEO;
    /** @type {?} */
    SliderLightboxComponent.prototype.INVALID;
    /** @type {?} */
    SliderLightboxComponent.prototype.totalImages;
    /** @type {?} */
    SliderLightboxComponent.prototype.nextImageIndex;
    /** @type {?} */
    SliderLightboxComponent.prototype.popupWidth;
    /** @type {?} */
    SliderLightboxComponent.prototype.marginLeft;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxPrevDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxNextDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.showLoading;
    /** @type {?} */
    SliderLightboxComponent.prototype.effectStyle;
    /** @type {?} */
    SliderLightboxComponent.prototype.speed;
    /** @type {?} */
    SliderLightboxComponent.prototype.title;
    /** @type {?} */
    SliderLightboxComponent.prototype.videoAutoPlay;
    /** @type {?} */
    SliderLightboxComponent.prototype.currentImageIndex;
    /** @type {?} */
    SliderLightboxComponent.prototype.showImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.direction;
    /** @type {?} */
    SliderLightboxComponent.prototype.images;
    /** @type {?} */
    SliderLightboxComponent.prototype.paginationShow;
    /** @type {?} */
    SliderLightboxComponent.prototype.infinite;
    /** @type {?} */
    SliderLightboxComponent.prototype.close;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.sanitizer;
    /** @type {?} */
    SliderLightboxComponent.prototype.imageSliderService;
    /**
     * @type {?}
     * @private
     */
    SliderLightboxComponent.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWxpZ2h0Ym94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWltYWdlLXNsaWRlci8iLCJzb3VyY2VzIjpbImxpYi9zbGlkZXItbGlnaHRib3gvc2xpZGVyLWxpZ2h0Ym94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILGlCQUFpQixFQUNqQixTQUFTLEVBRVQsTUFBTSxFQUdOLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUVaLFlBQVksRUFDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBbUIsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7TUFFOUQsYUFBYSxHQUFHLHNFQUFzRTs7TUFDeEYsbUJBQW1CLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7O01BQ25ELG9CQUFvQixHQUFHLENBQUMsS0FBSyxDQUFDO0FBTWxDLE1BQU0sT0FBTyx1QkFBdUI7Ozs7Ozs7SUFxRGhDLFlBQ1ksS0FBd0IsRUFDeEIsU0FBdUIsRUFDeEIsa0JBQXdDLEVBQ3JCLFFBQWE7UUFIL0IsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFDeEIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUN4Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO1FBQ3JCLGFBQVEsR0FBUixRQUFRLENBQUs7UUF2RDNDLFlBQU8sR0FBRyxTQUFTLENBQUM7UUFDcEIsVUFBSyxHQUFHLE9BQU8sQ0FBQztRQUNoQixVQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ2hCLFlBQU8sR0FBRyxTQUFTLENBQUM7UUFDcEIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsbUJBQWMsR0FBVyxDQUFDLENBQUMsQ0FBQztRQUM1Qixl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RUFBRSxpQkFBaUI7Z0JBQzNCLGk4RUFBK0M7YUFDbEQ7Ozs7WUF2QkcsaUJBQWlCO1lBYVosWUFBWTtZQUNaLG9CQUFvQjs0Q0FtRXBCLE1BQU0sU0FBQyxRQUFROzs7NEJBdkNuQixLQUFLO2dDQUNMLEtBQUs7d0JBQ0wsS0FBSzt3QkFDTCxLQUFLO3FCQUNMLEtBQUs7NkJBQ0wsS0FBSzs2QkFDTCxLQUFLO3VCQVNMLEtBQUs7b0JBR0wsTUFBTTtrQ0FJTixZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUF0QzFDLDBDQUFvQjs7SUFDcEIsd0NBQWdCOztJQUNoQix3Q0FBZ0I7O0lBQ2hCLDBDQUFvQjs7SUFDcEIsOENBQXdCOztJQUN4QixpREFBNEI7O0lBQzVCLDZDQUEwQjs7SUFDMUIsNkNBQXVCOztJQUN2QixzREFBcUM7O0lBQ3JDLHNEQUFxQzs7SUFDckMsOENBQTRCOztJQUM1Qiw4Q0FBNkI7O0lBQzdCLHdDQUFrQjs7SUFDbEIsd0NBQW1COztJQUduQixnREFBd0M7O0lBQ3hDLG9EQUF1Qzs7SUFDdkMsNENBQW1COztJQUNuQiw0Q0FBbUM7O0lBQ25DLHlDQUFvQzs7SUFDcEMsaURBQXlDOztJQVV6QywyQ0FBbUM7O0lBR25DLHdDQUEwQzs7Ozs7SUFrQnRDLHdDQUFnQzs7Ozs7SUFDaEMsNENBQStCOztJQUMvQixxREFBK0M7Ozs7O0lBQy9DLDJDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIE9uSW5pdCxcbiAgICBJbmplY3QsXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBWaWV3Q2hpbGQsXG4gICAgSG9zdExpc3RlbmVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE5nSW1hZ2VTbGlkZXJTZXJ2aWNlIH0gZnJvbSAnLi8uLi9uZy1pbWFnZS1zbGlkZXIuc2VydmljZSc7XG5cbmNvbnN0IHlvdXR1YmVSZWdFeHAgPSAvXi4qKHlvdXR1LmJlXFwvfHZcXC98dVxcL1xcd1xcL3xlbWJlZFxcL3x3YXRjaFxcP3Y9fFxcJnY9fFxcP3Y9KShbXiNcXCZcXD9dKikuKi8sXG4gICAgdmFsaWRGaWxlRXh0ZW5zaW9ucyA9IFsnanBlZycsICdqcGcnLCAnZ2lmJywgJ3BuZyddLFxuICAgIHZhbGlkVmlkZW9FeHRlbnNpb25zID0gWydtcDQnXTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdzbGlkZXItbGlnaHRib3gnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zbGlkZXItbGlnaHRib3guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNsaWRlckxpZ2h0Ym94Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgWU9VVFVCRSA9ICd5b3V0dWJlJztcbiAgICBJTUFHRSA9ICdpbWFnZSc7XG4gICAgVklERU8gPSAndmlkZW8nO1xuICAgIElOVkFMSUQgPSAnaW52YWxpZCc7XG4gICAgdG90YWxJbWFnZXM6IG51bWJlciA9IDA7XG4gICAgbmV4dEltYWdlSW5kZXg6IG51bWJlciA9IC0xO1xuICAgIHBvcHVwV2lkdGg6IG51bWJlciA9IDEyMDA7XG4gICAgbWFyZ2luTGVmdDogbnVtYmVyID0gMDtcbiAgICBsaWdodGJveFByZXZEaXNhYmxlOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGlnaHRib3hOZXh0RGlzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHNob3dMb2FkaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgICBlZmZlY3RTdHlsZTogc3RyaW5nID0gJ25vbmUnO1xuICAgIHNwZWVkOiBudW1iZXIgPSAxOyAvLyBkZWZhdWx0IHNwZWVkIGluIHNlY29uZFxuICAgIHRpdGxlOiBzdHJpbmcgPSAnJztcblxuICAgIC8vIEBJbnB1dHNcbiAgICBASW5wdXQoKSB2aWRlb0F1dG9QbGF5OiBib29sZWFuID0gZmFsc2U7XG4gICAgQElucHV0KCkgY3VycmVudEltYWdlSW5kZXg6IG51bWJlciA9IDA7XG4gICAgQElucHV0KCkgc2hvd0ltYWdlO1xuICAgIEBJbnB1dCgpIGRpcmVjdGlvbjogc3RyaW5nID0gJ2x0cic7XG4gICAgQElucHV0KCkgaW1hZ2VzOiBBcnJheTxvYmplY3Q+ID0gW107XG4gICAgQElucHV0KCkgcGFnaW5hdGlvblNob3c6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBASW5wdXQoKVxuICAgIHNldCBhbmltYXRpb25TcGVlZChkYXRhOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGRhdGFcbiAgICAgICAgICAgICYmIHR5cGVvZiAoZGF0YSkgPT09ICdudW1iZXInXG4gICAgICAgICAgICAmJiBkYXRhID49IDAuMVxuICAgICAgICAgICAgJiYgZGF0YSA8PSA1KSB7XG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBASW5wdXQoKSBpbmZpbml0ZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLy8gQE91dHB1dFxuICAgIEBPdXRwdXQoKSBjbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIC8qIEBPdXRwdXQoKSBwcmV2SW1hZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTsgKi9cbiAgICAvKiBAT3V0cHV0KCkgbmV4dEltYWdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7ICovXG5cbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXl1cCcsIFsnJGV2ZW50J10pXG4gICAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQua2V5KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkgPT09ICdhcnJvd3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dEltYWdlTGlnaHRib3goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSAnYXJyb3dsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldkltYWdlTGlnaHRib3goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICAgICAgcHVibGljIGltYWdlU2xpZGVyU2VydmljZTogTmdJbWFnZVNsaWRlclNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5nZXRJbWFnZURhdGEoKTtcbiAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMucmVzZXRTdGF0ZSgpO1xuICAgIH1cblxuICAgIGNsb3NlTGlnaHRib3goKSB7XG4gICAgICAgIHRoaXMuY2xvc2UuZW1pdCgpO1xuICAgIH1cblxuICAgIHByZXZJbWFnZUxpZ2h0Ym94KCkge1xuICAgICAgICBpZiAodGhpcy5pbmZpbml0ZSAmJiB0aGlzLmN1cnJlbnRJbWFnZUluZGV4ID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlSW5kZXggPSB0aGlzLmltYWdlcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW1hZ2VJbmRleCA+IDAgJiYgIXRoaXMubGlnaHRib3hQcmV2RGlzYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW1hZ2VJbmRleC0tO1xuICAgICAgICAgICAgLy90aGlzLnByZXZJbWFnZS5lbWl0KCk7XG4gICAgICAgICAgICB0aGlzLmdldEltYWdlRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5uZXh0UHJldkRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRJbWFnZUxpZ2h0Ym94KCkge1xuICAgICAgICBpZiAodGhpcy5pbmZpbml0ZSAmJiB0aGlzLmN1cnJlbnRJbWFnZUluZGV4ID09IHRoaXMuaW1hZ2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEltYWdlSW5kZXggPSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbWFnZUluZGV4IDwgdGhpcy5pbWFnZXMubGVuZ3RoIC0gMSAmJiAhdGhpcy5saWdodGJveE5leHREaXNhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbWFnZUluZGV4Kys7XG4gICAgICAgICAgICAvL3RoaXMubmV4dEltYWdlLmVtaXQoKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0SW1hZ2VEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLm5leHRQcmV2RGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFByZXZEaXNhYmxlKCkge1xuICAgICAgICB0aGlzLmxpZ2h0Ym94TmV4dERpc2FibGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmxpZ2h0Ym94UHJldkRpc2FibGUgPSB0cnVlO1xuICAgICAgICAvL3NldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcGx5QnV0dG9uRGlzYWJsZUNvbmRpdGlvbigpO1xuICAgICAgICAvL30sIHRoaXMuc3BlZWQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBhcHBseUJ1dHRvbkRpc2FibGVDb25kaXRpb24oKSB7XG4gICAgICAgIHRoaXMubGlnaHRib3hOZXh0RGlzYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxpZ2h0Ym94UHJldkRpc2FibGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLmluZmluaXRlICYmIHRoaXMuY3VycmVudEltYWdlSW5kZXggPj0gdGhpcy5pbWFnZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5saWdodGJveE5leHREaXNhYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5maW5pdGUgJiYgdGhpcy5jdXJyZW50SW1hZ2VJbmRleCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmxpZ2h0Ym94UHJldkRpc2FibGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0SW1hZ2VEYXRhKCkge1xuICAgICAgICBpZiAodGhpcy5pbWFnZXNcbiAgICAgICAgICAgICYmIHRoaXMuaW1hZ2VzLmxlbmd0aFxuICAgICAgICAgICAgJiYgdHlwZW9mICh0aGlzLmN1cnJlbnRJbWFnZUluZGV4KSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICYmIHRoaXMuY3VycmVudEltYWdlSW5kZXggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgJiYgdGhpcy5pbWFnZXNbdGhpcy5jdXJyZW50SW1hZ2VJbmRleF1cbiAgICAgICAgICAgICYmICh0aGlzLmltYWdlc1t0aGlzLmN1cnJlbnRJbWFnZUluZGV4XVsnaW1hZ2UnXSB8fCB0aGlzLmltYWdlc1t0aGlzLmN1cnJlbnRJbWFnZUluZGV4XVsndmlkZW8nXSkpIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmltYWdlc1t0aGlzLmN1cnJlbnRJbWFnZUluZGV4XVsndGl0bGUnXSB8fCAnJztcbiAgICAgICAgICAgIHRoaXMudG90YWxJbWFnZXMgPSB0aGlzLmltYWdlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IobGV0IGlmcmFtZUkgaW4gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlmcmFtZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaWZyYW1lXCIpW2lmcmFtZUldICYmIHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpZnJhbWVcIilbaWZyYW1lSV0uY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaWZyYW1lXCIpW2lmcmFtZUldLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoJ3tcImV2ZW50XCI6XCJjb21tYW5kXCIsXCJmdW5jXCI6XCJwYXVzZVZpZGVvXCIsXCJhcmdzXCI6XCJcIn0nLCAnKicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihsZXQgdmlkZW9JIGluIHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ2aWRlb1wiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIilbdmlkZW9JXSAmJiB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIilbdmlkZW9JXS5wYXVzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmlkZW9cIilbdmlkZW9JXS5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0U3RhdGUoKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VzID0gW107XG4gICAgfVxufVxuIl19