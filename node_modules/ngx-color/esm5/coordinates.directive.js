import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener, NgModule, Output, } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
var CoordinatesDirective = /** @class */ (function () {
    function CoordinatesDirective(el) {
        this.el = el;
        this.coordinatesChange = new Subject();
        this.mousechange = new Subject();
        this.mouseListening = false;
    }
    CoordinatesDirective.prototype.mousemove = function ($event, x, y, isTouch) {
        if (isTouch === void 0) { isTouch = false; }
        if (this.mouseListening) {
            $event.preventDefault();
            this.mousechange.next({ $event: $event, x: x, y: y, isTouch: isTouch });
        }
    };
    CoordinatesDirective.prototype.mouseup = function () {
        this.mouseListening = false;
    };
    CoordinatesDirective.prototype.mousedown = function ($event, x, y, isTouch) {
        if (isTouch === void 0) { isTouch = false; }
        $event.preventDefault();
        this.mouseListening = true;
        this.mousechange.next({ $event: $event, x: x, y: y, isTouch: isTouch });
    };
    CoordinatesDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.sub = this.mousechange
            .pipe(
        // limit times it is updated for the same area
        distinctUntilChanged(function (p, q) { return p.x === q.x && p.y === q.y; }))
            .subscribe(function (n) { return _this.handleChange(n.x, n.y, n.$event, n.isTouch); });
    };
    CoordinatesDirective.prototype.ngOnDestroy = function () {
        this.sub.unsubscribe();
    };
    CoordinatesDirective.prototype.handleChange = function (x, y, $event, isTouch) {
        var containerWidth = this.el.nativeElement.clientWidth;
        var containerHeight = this.el.nativeElement.clientHeight;
        var left = x -
            (this.el.nativeElement.getBoundingClientRect().left + window.pageXOffset);
        var top = y - this.el.nativeElement.getBoundingClientRect().top;
        if (!isTouch) {
            top = top - window.pageYOffset;
        }
        this.coordinatesChange.next({
            x: x,
            y: y,
            top: top,
            left: left,
            containerWidth: containerWidth,
            containerHeight: containerHeight,
            $event: $event,
        });
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], CoordinatesDirective.prototype, "coordinatesChange", void 0);
    tslib_1.__decorate([
        HostListener('window:mousemove', ['$event', '$event.pageX', '$event.pageY']),
        HostListener('window:touchmove', [
            '$event',
            '$event.touches[0].clientX',
            '$event.touches[0].clientY',
            'true',
        ]),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Event, Number, Number, Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CoordinatesDirective.prototype, "mousemove", null);
    tslib_1.__decorate([
        HostListener('window:mouseup'),
        HostListener('window:touchend'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], CoordinatesDirective.prototype, "mouseup", null);
    tslib_1.__decorate([
        HostListener('mousedown', ['$event', '$event.pageX', '$event.pageY']),
        HostListener('touchstart', [
            '$event',
            '$event.touches[0].clientX',
            '$event.touches[0].clientY',
            'true',
        ]),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Event, Number, Number, Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], CoordinatesDirective.prototype, "mousedown", null);
    CoordinatesDirective = tslib_1.__decorate([
        Directive({ selector: '[ngx-color-coordinates]' }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], CoordinatesDirective);
    return CoordinatesDirective;
}());
export { CoordinatesDirective };
var CoordinatesModule = /** @class */ (function () {
    function CoordinatesModule() {
    }
    CoordinatesModule = tslib_1.__decorate([
        NgModule({
            declarations: [CoordinatesDirective],
            exports: [CoordinatesDirective],
        })
    ], CoordinatesModule);
    return CoordinatesModule;
}());
export { CoordinatesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29vcmRpbmF0ZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWNvbG9yLyIsInNvdXJjZXMiOlsiY29vcmRpbmF0ZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osUUFBUSxFQUdSLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUd0RDtJQW1ERSw4QkFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFqRGxDLHNCQUFpQixHQUFHLElBQUksT0FBTyxFQVEzQixDQUFDO1FBQ0csZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFLN0IsQ0FBQztRQUVHLG1CQUFjLEdBQUcsS0FBSyxDQUFDO0lBaUNNLENBQUM7SUF4QnRDLHdDQUFTLEdBQVQsVUFBVSxNQUFhLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxPQUFlO1FBQWYsd0JBQUEsRUFBQSxlQUFlO1FBQzVELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLEdBQUEsRUFBRSxDQUFDLEdBQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBR0Qsc0NBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFRRCx3Q0FBUyxHQUFULFVBQVUsTUFBYSxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsT0FBZTtRQUFmLHdCQUFBLEVBQUEsZUFBZTtRQUM1RCxNQUFNLENBQUMsY0FBYyxF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QixvQkFBb0IsQ0F1RmhDO0lBQUQsMkJBQUM7Q0FBQSxBQXZGRCxJQXVGQztTQXZGWSxvQkFBb0I7QUE2RmpDO0lBQUE7SUFBZ0MsQ0FBQztJQUFwQixpQkFBaUI7UUFKN0IsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFLENBQUMsb0JBQW9CLENBQUM7WUFDcEMsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUM7U0FDaEMsQ0FBQztPQUNXLGlCQUFpQixDQUFHO0lBQUQsd0JBQUM7Q0FBQSxBQUFqQyxJQUFpQztTQUFwQixpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgTmdNb2R1bGUsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbmd4LWNvbG9yLWNvb3JkaW5hdGVzXScgfSlcbmV4cG9ydCBjbGFzcyBDb29yZGluYXRlc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQE91dHB1dCgpXG4gIGNvb3JkaW5hdGVzQ2hhbmdlID0gbmV3IFN1YmplY3Q8e1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIGNvbnRhaW5lcldpZHRoOiBudW1iZXI7XG4gICAgY29udGFpbmVySGVpZ2h0OiBudW1iZXI7XG4gICAgJGV2ZW50OiBhbnk7XG4gIH0+KCk7XG4gIHByaXZhdGUgbW91c2VjaGFuZ2UgPSBuZXcgU3ViamVjdDx7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICAkZXZlbnQ6IGFueTtcbiAgICBpc1RvdWNoOiBib29sZWFuO1xuICB9PigpO1xuXG4gIHByaXZhdGUgbW91c2VMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzdWI6IFN1YnNjcmlwdGlvbjtcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93Om1vdXNlbW92ZScsIFsnJGV2ZW50JywgJyRldmVudC5wYWdlWCcsICckZXZlbnQucGFnZVknXSlcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnRvdWNobW92ZScsIFtcbiAgICAnJGV2ZW50JyxcbiAgICAnJGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCcsXG4gICAgJyRldmVudC50b3VjaGVzWzBdLmNsaWVudFknLFxuICAgICd0cnVlJyxcbiAgXSlcbiAgbW91c2Vtb3ZlKCRldmVudDogRXZlbnQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBpc1RvdWNoID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5tb3VzZUxpc3RlbmluZykge1xuICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLm1vdXNlY2hhbmdlLm5leHQoeyAkZXZlbnQsIHgsIHksIGlzVG91Y2ggfSk7XG4gICAgfVxuICB9XG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzptb3VzZXVwJylcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnRvdWNoZW5kJylcbiAgbW91c2V1cCgpIHtcbiAgICB0aGlzLm1vdXNlTGlzdGVuaW5nID0gZmFsc2U7XG4gIH1cbiAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJywgWyckZXZlbnQnLCAnJGV2ZW50LnBhZ2VYJywgJyRldmVudC5wYWdlWSddKVxuICBASG9zdExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgW1xuICAgICckZXZlbnQnLFxuICAgICckZXZlbnQudG91Y2hlc1swXS5jbGllbnRYJyxcbiAgICAnJGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WScsXG4gICAgJ3RydWUnLFxuICBdKVxuICBtb3VzZWRvd24oJGV2ZW50OiBFdmVudCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGlzVG91Y2ggPSBmYWxzZSkge1xuICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMubW91c2VMaXN0ZW5pbmcgPSB0cnVlO1xuICAgIHRoaXMubW91c2VjaGFuZ2UubmV4dCh7ICRldmVudCwgeCwgeSwgaXNUb3VjaCB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWIgPSB0aGlzLm1vdXNlY2hhbmdlXG4gICAgICAucGlwZShcbiAgICAgICAgLy8gbGltaXQgdGltZXMgaXQgaXMgdXBkYXRlZCBmb3IgdGhlIHNhbWUgYXJlYVxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgocCwgcSkgPT4gcC54ID09PSBxLnggJiYgcC55ID09PSBxLnkpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZShuID0+IHRoaXMuaGFuZGxlQ2hhbmdlKG4ueCwgbi55LCBuLiRldmVudCwgbi5pc1RvdWNoKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKHg6IG51bWJlciwgeTogbnVtYmVyLCAkZXZlbnQ6IEV2ZW50LCBpc1RvdWNoOiBib29sZWFuKSB7XG4gICAgY29uc3QgY29udGFpbmVyV2lkdGggPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICBjb25zdCBsZWZ0ID1cbiAgICAgIHggLVxuICAgICAgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0KTtcbiAgICBsZXQgdG9wID0geSAtIHRoaXMuZWwubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG5cbiAgICBpZiAoIWlzVG91Y2gpIHtcbiAgICAgIHRvcCA9IHRvcCAtIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICB9XG4gICAgdGhpcy5jb29yZGluYXRlc0NoYW5nZS5uZXh0KHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgdG9wLFxuICAgICAgbGVmdCxcbiAgICAgIGNvbnRhaW5lcldpZHRoLFxuICAgICAgY29udGFpbmVySGVpZ2h0LFxuICAgICAgJGV2ZW50LFxuICAgIH0pO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0Nvb3JkaW5hdGVzRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW0Nvb3JkaW5hdGVzRGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29vcmRpbmF0ZXNNb2R1bGUge31cbiJdfQ==