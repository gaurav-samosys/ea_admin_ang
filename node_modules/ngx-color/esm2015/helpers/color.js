import { TinyColor } from '@ctrl/tinycolor';
export function simpleCheckForValidColor(data) {
    const keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
    let checked = 0;
    let passed = 0;
    keysToCheck.forEach(letter => {
        if (!data[letter]) {
            return;
        }
        checked += 1;
        if (!isNaN(data[letter])) {
            passed += 1;
        }
        if (letter === 's' || letter === 'l') {
            const percentPatt = /^\d+%$/;
            if (percentPatt.test(data[letter])) {
                passed += 1;
            }
        }
    });
    return checked === passed ? data : false;
}
export function toState(data, oldHue) {
    const color = data.hex ? new TinyColor(data.hex) : new TinyColor(data);
    const hsl = color.toHsl();
    const hsv = color.toHsv();
    const rgb = color.toRgb();
    const hex = color.toHex();
    if (hsl.s === 0) {
        hsl.h = oldHue || 0;
        hsv.h = oldHue || 0;
    }
    const transparent = hex === '000000' && rgb.a === 0;
    return {
        hsl,
        hex: transparent ? 'transparent' : `#${hex}`,
        rgb,
        hsv,
        oldHue: data.h || oldHue || hsl.h,
        source: data.source,
    };
}
export function isValidHex(hex) {
    return new TinyColor(hex).isValid;
}
export function getContrastingColor(data) {
    if (!data) {
        return '#fff';
    }
    const col = toState(data);
    if (col.hex === 'transparent') {
        return 'rgba(0,0,0,0.4)';
    }
    const yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
    return yiq >= 128 ? '#000' : '#fff';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sb3IvIiwic291cmNlcyI6WyJoZWxwZXJzL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUk1QyxNQUFNLFVBQVUsd0JBQXdCLENBQUMsSUFBSTtJQUMzQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3RCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUNELE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxDQUFDLENBQUM7U0FDYjtRQUNELElBQUksTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQ3BDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztZQUM3QixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxDQUFDLENBQUM7YUFDYjtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFlO0lBQzNDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkUsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDZixHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO0tBQ3JCO0lBQ0QsTUFBTSxXQUFXLEdBQUcsR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwRCxPQUFPO1FBQ0wsR0FBRztRQUNILEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDNUMsR0FBRztRQUNILEdBQUc7UUFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO0tBQ3BCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXO0lBQ3BDLE9BQU8sSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsSUFBSTtJQUN0QyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssYUFBYSxFQUFFO1FBQzdCLE9BQU8saUJBQWlCLENBQUM7S0FDMUI7SUFDRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3pFLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDdEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRpbnlDb2xvciB9IGZyb20gJ0BjdHJsL3Rpbnljb2xvcic7XG5cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi9jb2xvci5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNpbXBsZUNoZWNrRm9yVmFsaWRDb2xvcihkYXRhKSB7XG4gIGNvbnN0IGtleXNUb0NoZWNrID0gWydyJywgJ2cnLCAnYicsICdhJywgJ2gnLCAncycsICdsJywgJ3YnXTtcbiAgbGV0IGNoZWNrZWQgPSAwO1xuICBsZXQgcGFzc2VkID0gMDtcbiAga2V5c1RvQ2hlY2suZm9yRWFjaChsZXR0ZXIgPT4ge1xuICAgIGlmICghZGF0YVtsZXR0ZXJdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNoZWNrZWQgKz0gMTtcbiAgICBpZiAoIWlzTmFOKGRhdGFbbGV0dGVyXSkpIHtcbiAgICAgIHBhc3NlZCArPSAxO1xuICAgIH1cbiAgICBpZiAobGV0dGVyID09PSAncycgfHwgbGV0dGVyID09PSAnbCcpIHtcbiAgICAgIGNvbnN0IHBlcmNlbnRQYXR0ID0gL15cXGQrJSQvO1xuICAgICAgaWYgKHBlcmNlbnRQYXR0LnRlc3QoZGF0YVtsZXR0ZXJdKSkge1xuICAgICAgICBwYXNzZWQgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hlY2tlZCA9PT0gcGFzc2VkID8gZGF0YSA6IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9TdGF0ZShkYXRhLCBvbGRIdWU/OiBudW1iZXIpOiBDb2xvciB7XG4gIGNvbnN0IGNvbG9yID0gZGF0YS5oZXggPyBuZXcgVGlueUNvbG9yKGRhdGEuaGV4KSA6IG5ldyBUaW55Q29sb3IoZGF0YSk7XG4gIGNvbnN0IGhzbCA9IGNvbG9yLnRvSHNsKCk7XG4gIGNvbnN0IGhzdiA9IGNvbG9yLnRvSHN2KCk7XG4gIGNvbnN0IHJnYiA9IGNvbG9yLnRvUmdiKCk7XG4gIGNvbnN0IGhleCA9IGNvbG9yLnRvSGV4KCk7XG4gIGlmIChoc2wucyA9PT0gMCkge1xuICAgIGhzbC5oID0gb2xkSHVlIHx8IDA7XG4gICAgaHN2LmggPSBvbGRIdWUgfHwgMDtcbiAgfVxuICBjb25zdCB0cmFuc3BhcmVudCA9IGhleCA9PT0gJzAwMDAwMCcgJiYgcmdiLmEgPT09IDA7XG5cbiAgcmV0dXJuIHtcbiAgICBoc2wsXG4gICAgaGV4OiB0cmFuc3BhcmVudCA/ICd0cmFuc3BhcmVudCcgOiBgIyR7aGV4fWAsXG4gICAgcmdiLFxuICAgIGhzdixcbiAgICBvbGRIdWU6IGRhdGEuaCB8fCBvbGRIdWUgfHwgaHNsLmgsXG4gICAgc291cmNlOiBkYXRhLnNvdXJjZSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRIZXgoaGV4OiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaGV4KS5pc1ZhbGlkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RpbmdDb2xvcihkYXRhKSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiAnI2ZmZic7XG4gIH1cbiAgY29uc3QgY29sID0gdG9TdGF0ZShkYXRhKTtcbiAgaWYgKGNvbC5oZXggPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICByZXR1cm4gJ3JnYmEoMCwwLDAsMC40KSc7XG4gIH1cbiAgY29uc3QgeWlxID0gKGNvbC5yZ2IuciAqIDI5OSArIGNvbC5yZ2IuZyAqIDU4NyArIGNvbC5yZ2IuYiAqIDExNCkgLyAxMDAwO1xuICByZXR1cm4geWlxID49IDEyOCA/ICcjMDAwJyA6ICcjZmZmJztcbn1cbiJdfQ==