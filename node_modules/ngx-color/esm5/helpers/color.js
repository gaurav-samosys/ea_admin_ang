import { TinyColor } from '@ctrl/tinycolor';
export function simpleCheckForValidColor(data) {
    var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
    var checked = 0;
    var passed = 0;
    keysToCheck.forEach(function (letter) {
        if (!data[letter]) {
            return;
        }
        checked += 1;
        if (!isNaN(data[letter])) {
            passed += 1;
        }
        if (letter === 's' || letter === 'l') {
            var percentPatt = /^\d+%$/;
            if (percentPatt.test(data[letter])) {
                passed += 1;
            }
        }
    });
    return checked === passed ? data : false;
}
export function toState(data, oldHue) {
    var color = data.hex ? new TinyColor(data.hex) : new TinyColor(data);
    var hsl = color.toHsl();
    var hsv = color.toHsv();
    var rgb = color.toRgb();
    var hex = color.toHex();
    if (hsl.s === 0) {
        hsl.h = oldHue || 0;
        hsv.h = oldHue || 0;
    }
    var transparent = hex === '000000' && rgb.a === 0;
    return {
        hsl: hsl,
        hex: transparent ? 'transparent' : "#" + hex,
        rgb: rgb,
        hsv: hsv,
        oldHue: data.h || oldHue || hsl.h,
        source: data.source,
    };
}
export function isValidHex(hex) {
    return new TinyColor(hex).isValid;
}
export function getContrastingColor(data) {
    if (!data) {
        return '#fff';
    }
    var col = toState(data);
    if (col.hex === 'transparent') {
        return 'rgba(0,0,0,0.4)';
    }
    var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
    return yiq >= 128 ? '#000' : '#fff';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29sb3IvIiwic291cmNlcyI6WyJoZWxwZXJzL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUk1QyxNQUFNLFVBQVUsd0JBQXdCLENBQUMsSUFBSTtJQUMzQyxJQUFNLFdBQVcsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3RCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqQixPQUFPO1NBQ1I7UUFDRCxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksQ0FBQyxDQUFDO1NBQ2I7UUFDRCxJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRTtZQUNwQyxJQUFNLFdBQVcsR0FBRyxRQUFRLENBQUM7WUFDN0IsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO2dCQUNsQyxNQUFNLElBQUksQ0FBQyxDQUFDO2FBQ2I7U0FDRjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxPQUFPLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUMzQyxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBZTtJQUMzQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzFCLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMxQixJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2YsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQztLQUNyQjtJQUNELElBQU0sV0FBVyxHQUFHLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFcEQsT0FBTztRQUNMLEdBQUcsS0FBQTtRQUNILEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBSSxHQUFLO1FBQzVDLEdBQUcsS0FBQTtRQUNILEdBQUcsS0FBQTtRQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07S0FDcEIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEdBQVc7SUFDcEMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDcEMsQ0FBQztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxJQUFJO0lBQ3RDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxhQUFhLEVBQUU7UUFDN0IsT0FBTyxpQkFBaUIsQ0FBQztLQUMxQjtJQUNELElBQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDekUsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcblxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuL2NvbG9yLmludGVyZmFjZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlQ2hlY2tGb3JWYWxpZENvbG9yKGRhdGEpIHtcbiAgY29uc3Qga2V5c1RvQ2hlY2sgPSBbJ3InLCAnZycsICdiJywgJ2EnLCAnaCcsICdzJywgJ2wnLCAndiddO1xuICBsZXQgY2hlY2tlZCA9IDA7XG4gIGxldCBwYXNzZWQgPSAwO1xuICBrZXlzVG9DaGVjay5mb3JFYWNoKGxldHRlciA9PiB7XG4gICAgaWYgKCFkYXRhW2xldHRlcl0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hlY2tlZCArPSAxO1xuICAgIGlmICghaXNOYU4oZGF0YVtsZXR0ZXJdKSkge1xuICAgICAgcGFzc2VkICs9IDE7XG4gICAgfVxuICAgIGlmIChsZXR0ZXIgPT09ICdzJyB8fCBsZXR0ZXIgPT09ICdsJykge1xuICAgICAgY29uc3QgcGVyY2VudFBhdHQgPSAvXlxcZCslJC87XG4gICAgICBpZiAocGVyY2VudFBhdHQudGVzdChkYXRhW2xldHRlcl0pKSB7XG4gICAgICAgIHBhc3NlZCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGVja2VkID09PSBwYXNzZWQgPyBkYXRhIDogZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0YXRlKGRhdGEsIG9sZEh1ZT86IG51bWJlcik6IENvbG9yIHtcbiAgY29uc3QgY29sb3IgPSBkYXRhLmhleCA/IG5ldyBUaW55Q29sb3IoZGF0YS5oZXgpIDogbmV3IFRpbnlDb2xvcihkYXRhKTtcbiAgY29uc3QgaHNsID0gY29sb3IudG9Ic2woKTtcbiAgY29uc3QgaHN2ID0gY29sb3IudG9Ic3YoKTtcbiAgY29uc3QgcmdiID0gY29sb3IudG9SZ2IoKTtcbiAgY29uc3QgaGV4ID0gY29sb3IudG9IZXgoKTtcbiAgaWYgKGhzbC5zID09PSAwKSB7XG4gICAgaHNsLmggPSBvbGRIdWUgfHwgMDtcbiAgICBoc3YuaCA9IG9sZEh1ZSB8fCAwO1xuICB9XG4gIGNvbnN0IHRyYW5zcGFyZW50ID0gaGV4ID09PSAnMDAwMDAwJyAmJiByZ2IuYSA9PT0gMDtcblxuICByZXR1cm4ge1xuICAgIGhzbCxcbiAgICBoZXg6IHRyYW5zcGFyZW50ID8gJ3RyYW5zcGFyZW50JyA6IGAjJHtoZXh9YCxcbiAgICByZ2IsXG4gICAgaHN2LFxuICAgIG9sZEh1ZTogZGF0YS5oIHx8IG9sZEh1ZSB8fCBoc2wuaCxcbiAgICBzb3VyY2U6IGRhdGEuc291cmNlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEhleChoZXg6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRpbnlDb2xvcihoZXgpLmlzVmFsaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdGluZ0NvbG9yKGRhdGEpIHtcbiAgaWYgKCFkYXRhKSB7XG4gICAgcmV0dXJuICcjZmZmJztcbiAgfVxuICBjb25zdCBjb2wgPSB0b1N0YXRlKGRhdGEpO1xuICBpZiAoY29sLmhleCA9PT0gJ3RyYW5zcGFyZW50Jykge1xuICAgIHJldHVybiAncmdiYSgwLDAsMCwwLjQpJztcbiAgfVxuICBjb25zdCB5aXEgPSAoY29sLnJnYi5yICogMjk5ICsgY29sLnJnYi5nICogNTg3ICsgY29sLnJnYi5iICogMTE0KSAvIDEwMDA7XG4gIHJldHVybiB5aXEgPj0gMTI4ID8gJyMwMDAnIDogJyNmZmYnO1xufVxuIl19